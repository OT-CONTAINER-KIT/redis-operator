/*
Copyright 2020 Opstree Solutions.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/OT-CONTAINER-KIT/redis-operator/api/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedisSentinelListLister helps list RedisSentinelLists.
// All objects returned here must be treated as read-only.
type RedisSentinelListLister interface {
	// List lists all RedisSentinelLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta2.RedisSentinelList, err error)
	// RedisSentinelLists returns an object that can list and get RedisSentinelLists.
	RedisSentinelLists(namespace string) RedisSentinelListNamespaceLister
	RedisSentinelListListerExpansion
}

// redisSentinelListLister implements the RedisSentinelListLister interface.
type redisSentinelListLister struct {
	indexer cache.Indexer
}

// NewRedisSentinelListLister returns a new RedisSentinelListLister.
func NewRedisSentinelListLister(indexer cache.Indexer) RedisSentinelListLister {
	return &redisSentinelListLister{indexer: indexer}
}

// List lists all RedisSentinelLists in the indexer.
func (s *redisSentinelListLister) List(selector labels.Selector) (ret []*v1beta2.RedisSentinelList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.RedisSentinelList))
	})
	return ret, err
}

// RedisSentinelLists returns an object that can list and get RedisSentinelLists.
func (s *redisSentinelListLister) RedisSentinelLists(namespace string) RedisSentinelListNamespaceLister {
	return redisSentinelListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedisSentinelListNamespaceLister helps list and get RedisSentinelLists.
// All objects returned here must be treated as read-only.
type RedisSentinelListNamespaceLister interface {
	// List lists all RedisSentinelLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta2.RedisSentinelList, err error)
	// Get retrieves the RedisSentinelList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta2.RedisSentinelList, error)
	RedisSentinelListNamespaceListerExpansion
}

// redisSentinelListNamespaceLister implements the RedisSentinelListNamespaceLister
// interface.
type redisSentinelListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedisSentinelLists in the indexer for a given namespace.
func (s redisSentinelListNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.RedisSentinelList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.RedisSentinelList))
	})
	return ret, err
}

// Get retrieves the RedisSentinelList from the indexer for a given namespace and name.
func (s redisSentinelListNamespaceLister) Get(name string) (*v1beta2.RedisSentinelList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("redissentinellist"), name)
	}
	return obj.(*v1beta2.RedisSentinelList), nil
}
