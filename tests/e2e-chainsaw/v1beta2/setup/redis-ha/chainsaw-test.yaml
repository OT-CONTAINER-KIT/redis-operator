# This case is to test the HA setup of the Redis Replication and Sentinel
# It will create a Redis Replication and Sentinel, then terminate the Redis Replication master pod
# and check if the Sentinel can promote a new master pod.
# It check three place the same pod IP:
#   1. Status from RedisReplication
#   2. Label from RedisReplication
#   3. get-master-addr-by-name from Sentinel
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: setup-ha
spec:
  steps:
    - try:
        - apply:
            file: ha.yaml
        - apply:
            file: ../../../../data-assert/resources.yaml
        # create certificate secret use script, because the namespace name is unknown in the yaml file
        - script:
            timeout: 10s
            content: |
              cat <<EOF | kubectl apply -f -
              ---
              apiVersion: cert-manager.io/v1
              kind: Issuer
              metadata:
                name: selfsigned-issuer
                namespace: ${NAMESPACE}
              spec:
                selfSigned: {}
              ---
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: redis-tls
                namespace: ${NAMESPACE}
              spec:
                commonName: redis-replication
                dnsNames:
                  - "*.redis-replication-headless.${NAMESPACE}.svc.cluster.local"
                  - "*.redis-sentinel-sentinel-headless.${NAMESPACE}.svc.cluster.local"
                issuerRef:
                  name: selfsigned-issuer
                  kind: Issuer
                secretName: redis-tls-cert
              EOF

    - name: Test Master IP consistency
      try:
        - sleep:
            duration: 180s
        - script:
            timeout: 10s
            content: |
              export MASTER_POD_FROM_STATUS=$(kubectl -n ${NAMESPACE} get redisreplication redis-replication -o jsonpath='{.status.masterNode}');
              export FROM_SENTINEL=$(kubectl -n ${NAMESPACE} exec redis-sentinel-sentinel-0 -c redis-sentinel-sentinel -- redis-cli --no-auth-warning --tls --cacert /tls/ca.crt -a Opstree@1234sentinel -p 26379 sentinel get-master-addr-by-name myMaster | head -n 1 | cut -d'.' -f1);
              export MASTER_POD_FROM_LABEL=$(kubectl -n ${NAMESPACE} get pod -l app=redis-replication,redis-role=master,redis_setup_type=replication -o jsonpath='{.items[0].metadata.name}');
              if [ "$FROM_SENTINEL" = "$MASTER_POD_FROM_LABEL" ] && [ "$FROM_SENTINEL" = "$MASTER_POD_FROM_STATUS" ]; then echo "OK"; else echo "FAIL"; fi
            check:
              (contains($stdout, 'OK')): true

    - name: Put data
      try:
        - script:
            timeout: 30s
            content: >
              kubectl exec --namespace ${NAMESPACE} --container data-assert data-assert --
              bash -c  "cd /go/src/data-assert && go run main.go gen-redis-data \
                        --host redis-sentinel-sentinel.${NAMESPACE}.svc.cluster.local:26379 \
                        --mode sentinel \
                        --tls \
                        --password-sentinel Opstree@1234sentinel \
                        --password Opstree@1234replication"
            check:
              (contains($stdout, 'OK')): true

    - name: Restart redis-replication-0 pod
      try:
        - script:
            timeout: 10s
            content: |
              kubectl -n ${NAMESPACE} delete pod redis-replication-0

    - name: Test Master IP consistency
      try:
        - sleep:
            duration: 180s
        - script:
            timeout: 10s
            content: |
              export MASTER_POD_FROM_STATUS=$(kubectl -n ${NAMESPACE} get redisreplication redis-replication -o jsonpath='{.status.masterNode}');
              export FROM_SENTINEL=$(kubectl -n ${NAMESPACE} exec redis-sentinel-sentinel-0 -c redis-sentinel-sentinel -- redis-cli --no-auth-warning --tls --cacert /tls/ca.crt -a Opstree@1234sentinel -p 26379 sentinel get-master-addr-by-name myMaster | head -n 1 | cut -d'.' -f1);
              export MASTER_POD_FROM_LABEL=$(kubectl -n ${NAMESPACE} get pod -l app=redis-replication,redis-role=master,redis_setup_type=replication -o jsonpath='{.items[0].metadata.name}');
              if [ "$FROM_SENTINEL" = "$MASTER_POD_FROM_LABEL" ] && [ "$FROM_SENTINEL" = "$MASTER_POD_FROM_STATUS" ]; then echo "OK"; else echo "FAIL"; fi
            check:
              (contains($stdout, 'OK')): true

    - name: Assert data
      try:
        - script:
            timeout: 30s
            content: >
              kubectl exec --namespace ${NAMESPACE} --container data-assert data-assert --
              bash -c "cd /go/src/data-assert && go run main.go chk-redis-data \
                       --host redis-sentinel-sentinel.${NAMESPACE}.svc.cluster.local:26379 \
                       --mode sentinel \
                       --tls \
                       --password-sentinel Opstree@1234sentinel \
                       --password Opstree@1234replication"
            check:
              (contains($stdout, 'OK')): true
